# Nabla Grammar (de facto)

Ast <- Global* EOF

Global <- Use / Def / Let / Init / GlobalError
GlobalError <- (!GlobalLA .)+

Use <- USE Ident? UseBody?
UseBody <- DOUBLE_COLON UseKind?
UseKind <-
    STAR
    / UseItem
    / UseItems
    / UseKindError
UseItem <- Ident UseBody? Alias?
UseItems <- LCURLY (UseItem / UseItemError)* RCURLY?
UseKindError <- (!UseKindLA .)+
UseItemError <- (!UseItemLA .)+

Def <-  DEF Ident? (COLON EXPR?)? EQ? Expr?

Let <- LET Ident? (COLON EXPR?)? EQ? Expr?

Init <- Expr

Expr <- Union / Single / ExprError
ExprError <- (!ExprLA .)+

Union <- Single UnionAlternative+
UnionAlternative <- PIPE Single?

Single <- Struct / List / Named / Primitive

Struct <- LCURLY (StructField / StructFieldError)* RCURLY?
StructField <- Ident (COLON Expr?)? (EQ Expr?)? Alias?
StructFieldError <- (!StructFieldLA .)+

List <- LBRACKET Expr* RBRACKET?

Named <- Ident InnerName* (Struct / List)?
InnerName <- DOUBLE_COLON Ident?

Primitive <- STRING / CHAR / NUMBER / Bool / NULL

Bool <- TRUE / FALSE

Alias <- AS (STRING / Ident)?

Ident <- IDENT

# Lookaheads

GlobalLA <-
    USE
    / DEF
    / LET
    / LCURLY
    / LBRACKET
    / IDENT
    / EOF
UseKindLA <-
    STAR
    / AS
    / RCURLY
    / GlobalLA
UseItemLA <- UseKindLA
ExprLA <-
    EQ
    / RCURLY
    / RBRACKET
    / AS
    / GlobalLA
StructFieldLA <-
    PIPE
    / ExprLA
